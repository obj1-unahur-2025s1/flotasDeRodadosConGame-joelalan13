import wollok.game.*

class Corsa {
    var property color
    method initialize(){
        if(not coloresValidos.listaColores().contains(color)){
            self.error("el auto no tiene color valido")
        }
    }
    method capacidad() = 4
    method velocidadMaxima() = 150
    method peso() = 1300

}

class Kwid {
    var property tieneTanqueAdicional
    method capacidad() = if(tieneTanqueAdicional) 3 else 4
    method velocidadMaxima() = if(tieneTanqueAdicional) 110 else 120
    method peso() = 1200 + if(tieneTanqueAdicional) 150 else 0
    method color() = "azul"
}

object trafic {
    var property interior = comodo
    var property motor = pulenta
    method capacidad() = interior.capacidad()
    method velocidadMaxima() = motor.velocidad()
    method peso() = 4000 + interior.peso() + motor.peso()
    method color() = "blanco"
}

class Especial {
    var property capacidad
    var property peso
    var property color
    const velocidadMaxima 
    method initialize(){
        if(not coloresValidos.listaColores().contains(color)){
            self.error("el auto no tiene color valido")
        }
    }
    method velocidadMaxima() = 
        velocidadMaxima.min(topeVelocidadMaxima.tope())
    
}

object topeVelocidadMaxima {
    var property tope = 200
}

object pulenta {
    method peso() = 800
    method velocidad() = 130
}

object bataton {
    method peso() = 500
    method velocidad() = 80
}
object comodo {
    method capacidad() = 5
    method peso() = 700
}

object popular {
    method capacidad() = 12
    method peso() = 1000
}

class Dependencia {
    const flota = []
    const property pedidosDependencia = #{}

    var property empleados = 0
    method agregarAFlota(rodado) {
        flota.add(rodado)
    }
    method quitarDeFlota(rodado) {flota.remove(rodado)}
    method pesoTotalFlota() = flota.sum({r=>r.peso()})
    method estaBienEquipada() = 
        self.tieneAlMenosRodados(3) && self.todosVanAlMenosA100()

    method tieneAlMenosRodados(cantidad) = flota.size() >= cantidad
    method todosVanAlMenosA100() = flota.all({r=>r.velocidadMaxima()>=100})
    method capacidadTotalEnColor(color) = 
        self.rodadosDeColor(color).sum({r=>r.capacidad()})
    method rodadosDeColor(color) = flota.filter({r=>r.color() == color})
    method colorDelRodadoMasRapido() = self.rodadoMasRapido().color()
    method rodadoMasRapido() = flota.max({r=>r.velocidadMaxima()})
    method capacidadFaltante() = (empleados - self.capacidadDeLaFlota()).max(0)
    method capacidadDeLaFlota() = flota.sum({r=>r.capacidad()})
    method esGrande() = empleados >= 40 && self.tieneAlMenosRodados(5)

    method agregarPedido(unPedido) =
        pedidosDependencia.add(unPedido)
    method eliminarPedido(unPedido) =
        pedidosDependencia.remove(unPedido)
    method pasajerosPedidos() =
        pedidosDependencia.sum({p => p.cantPasajeros()})
    method flotaNoSatisface(p) =
        flota.any({r => !p.satisfacePedido(r)})
    
    method pedidosInsatisfechos() =
        pedidosDependencia.filter({p => self.flotaNoSatisface(p)})
    
    method colorIncompatiblePedido(unColor) =
        pedidosDependencia.all({p => p.coloresInvalidos().contains(unColor)})
    
    method relajarPedidos() =
        pedidosDependencia.forEach(pedidosDependencia.relajar())
}

object coloresValidos{
    const property listaColores = #{"rojo","verde","azul","beige"}
}

class Pedidos{
    const property coloresInvalidos = #{}
    var property distancia
    var tiempoMaximo    
    var property cantPasajeros
    method colorInvalido(unColor) =
        coloresInvalidos.add(unColor)
    method velocidadRequerida() =
        distancia / tiempoMaximo
    method satisfacePedido(unRodado){
        return self.cumpleVelocidad(unRodado) && self.cumpleCapacidad(unRodado) && self.colorCompatible(unRodado)
    } 
    method cumpleVelocidad(unRodado){
        return unRodado.velocidadMaxima() >= (self.velocidadRequerida() + 10)
    }
    method cumpleCapacidad(unRodado){
        return unRodado.capacidad() >= cantPasajeros
    }
    method colorCompatible(unRodado){
        return !coloresInvalidos.contains(unRodado.color())
    }
    method acelerar() {tiempoMaximo = 1.max(tiempoMaximo - 1)}
    method relajar(){ timepoMaximo = tiempoMaximo + 1 }
}
